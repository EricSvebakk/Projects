enum AbsoluteDirection {
  north

  northeast

  east

  southeast

  south

  southwest

  west

  northwest
}

enum ArrivalDeparture {
  """
  Only show arrivals
  """
  arrivals

  """
  Only show departures
  """
  departures

  """
  Show both arrivals and departures
  """
  both
}

"""
Authority involved in public transportation. An organisation under which the responsibility of organising the transport service in a certain area is placed.
"""
type Authority {
  id: ID!

  name: String!

  url: String

  timezone: String!

  lang: String

  phone: String

  fareUrl: String

  lines: [Line]!

  """
  Get all situations active for the authority.
  """
  situations: [PtSituationElement]!
}

enum BicycleOptimisationMethod {
  quick

  safe

  flat

  greenways

  triangle

  transfers
}

type BikePark implements PlaceInterface {
  id: ID!

  name: String!

  spacesAvailable: Int

  realtime: Boolean

  longitude: Float

  latitude: Float
}

type BikeRentalStation implements PlaceInterface {
  id: ID!

  name: String!

  bikesAvailable: Int

  spacesAvailable: Int

  realtimeOccupancyAvailable: Boolean

  allowDropoff: Boolean

  networks: [String]!

  longitude: Float

  latitude: Float
}

enum BikesAllowed {
  """
  There is no bike information for the trip.
  """
  noInformation

  """
  The vehicle being used on this particular trip can accommodate at least one bicycle.
  """
  allowed

  """
  No bicycles are allowed on this trip.
  """
  notAllowed
}

type BookingArrangement {
  """
  How should service be booked?
  """
  bookingMethods: [BookingMethod]

  """
  Latest time the service can be booked. ISO 8601 timestamp
  """
  latestBookingTime: LocalTime

  """
  How many days prior to the travel the service needs to be booked
  """
  latestBookingDay: Int

  """
  Time constraints for booking
  """
  bookWhen: PurchaseWhen

  """
  Minimum period in advance service can be booked as a ISO 8601 duration
  """
  minimumBookingPeriod: String

  """
  Textual description of booking arrangement for service
  """
  bookingNote: String

  """
  Who should ticket be contacted for booking
  """
  bookingContact: Contact
}

enum BookingMethod {
  callDriver

  callOffice

  online

  phoneAtStop

  text
}

type Branding {
  id: ID

  """
  Full name to be used for branding.
  """
  name: String

  """
  Short name to be used for branding.
  """
  shortName: String

  """
  Description of branding.
  """
  description: String

  """
  URL to be used for branding
  """
  url: String

  """
  URL to an image be used for branding
  """
  image: String
}

type Contact {
  """
  Name of person to contact
  """
  contactPerson: String

  """
  Email adress for contact
  """
  email: String

  """
  Url for contact
  """
  url: String

  """
  Phone number for contact
  """
  phone: String

  """
  Textual description of how to get in contact
  """
  furtherDetails: String
}

"""
List of coordinates like: [[60.89, 11.12], [62.56, 12.10]]
"""
scalar Coordinates

"""
Local date using the ISO 8601 format: `YYYY-MM-DD`. Example: `2020-05-17`.
"""
scalar Date

"""
DateTime format accepting ISO 8601 dates with time zone offset.

Format:  `YYYY-MM-DD'T'hh:mm[:ss](Z|Â±01:00)`

Example: `2017-04-23T18:25:43+02:00` or `2017-04-23T16:25:43Z`
"""
scalar DateTime

"""
An advertised destination of a specific journey pattern, usually displayed on a head sign or at other on-board locations.
"""
type DestinationDisplay {
  """
  Name of destination to show on front of vehicle.
  """
  frontText: String
}

enum DirectionType {
  unknown

  outbound

  inbound

  clockwise

  anticlockwise
}

"""
A linear function to calculate a value(y) based on a parameter (x): `y = f(x) = a + bx`. It allows setting both a constant(a) and a coefficient(b) and the use those in the computation. Format: `a + b x`. Example: `1800 + 2.0 x`
"""
scalar DoubleFunction

"""
List of visits to quays as part of vehicle journeys. Updated with real time information where available
"""
type EstimatedCall {
  quay: Quay

  """
  Scheduled time of arrival at quay. Not affected by read time updated
  """
  aimedArrivalTime: DateTime!

  """
  Expected time of arrival at quay. Updated with real time information if available. Will be null if an actualArrivalTime exists
  """
  expectedArrivalTime: DateTime!

  """
  Actual time of arrival at quay. Updated from real time information if available. NOT IMPLEMENTED
  """
  actualArrivalTime: DateTime

  """
  Scheduled time of departure from quay. Not affected by read time updated
  """
  aimedDepartureTime: DateTime!

  """
  Expected time of departure from quay. Updated with real time information if available. Will be null if an actualDepartureTime exists
  """
  expectedDepartureTime: DateTime!

  """
  Actual time of departure from quay. Updated with real time information if available. NOT IMPLEMENTED
  """
  actualDepartureTime: DateTime

  """
  Whether this is a timing point or not. Boarding and alighting is not allowed at timing points.
  """
  timingPoint: Boolean!

  """
  Whether this call has been updated with real time information.
  """
  realtime: Boolean!

  """
  Whether the updated estimates are expected to be inaccurate. NOT IMPLEMENTED
  """
  predictionInaccurate: Boolean!

  realtimeState: RealtimeState!

  stopPositionInPattern: Int

  """
  Whether vehicle may be boarded at quay according to the planned data. If the cancellation flag is set, boarding is not possible, even if this field is set to true.
  """
  forBoarding: Boolean!

  """
  Whether vehicle may be alighted at quay according to the planned data. If the cancellation flag is set, alighting is not possible, even if this field is set to true.
  """
  forAlighting: Boolean!

  """
  Whether vehicle will only stop on request.
  """
  requestStop: Boolean!

  """
  Whether stop is cancelled. This means that either the ServiceJourney has a planned cancellation, the ServiceJourney has been cancelled by realtime data, or this particular StopPoint has been cancelled. This also means that both boarding and alighting has been cancelled.
  """
  cancellation: Boolean!

  """
  The date the estimated call is valid for.
  """
  date: Date

  serviceJourney: ServiceJourney

  destinationDisplay: DestinationDisplay

  notices: [Notice!]!

  """
  Get all relevant situations for this EstimatedCall.
  """
  situations: [PtSituationElement!]!

  """
  Booking arrangements for this EstimatedCall.
  """
  bookingArrangements: BookingArrangement
}

enum FilterPlaceType {
  """
  Quay
  """
  quay

  """
  StopPlace
  """
  stopPlace

  """
  Bicycle rent stations
  """
  bicycleRent

  """
  Bike parks
  """
  bikePark

  """
  Car parks
  """
  carPark
}

"""
Filter trips by disallowing lines involving certain elements. If both lines and authorities are specified, only one must be valid for each line to be banned. If a line is both banned and whitelisted, it will be counted as banned.
"""
input InputBanned {
  """
  Set of ids for lines that should not be used
  """
  lines: [ID] = []

  """
  Set of ids for authorities that should not be used
  """
  authorities: [ID] = []

  """
  Set of ids of quays that should not be allowed for boarding or alighting. Trip patterns that travel through the quay will still be permitted.
  """
  quays: [ID] = []

  """
  Set of ids of quays that should not be allowed for boarding, alighting or traveling thorugh.
  """
  quaysHard: [ID] = []

  """
  Set of ids of service journeys that should not be used.
  """
  serviceJourneys: [ID] = []
}

"""
Input type for coordinates in the WGS84 system
"""
input InputCoordinates {
  """
  The latitude of the place.
  """
  latitude: Float!

  """
  The longitude of the place.
  """
  longitude: Float!
}

enum InputField {
  dateTime

  from

  to
}

input InputPlaceIds {
  """
  Quays to include by id.
  """
  quays: [String]

  """
  Lines to include by id.
  """
  lines: [String]

  """
  Bike rentals to include by id.
  """
  bikeRentalStations: [String]

  """
  Bike parks to include by id.
  """
  bikeParks: [String]

  """
  Car parks to include by id.
  """
  carParks: [String]
}

"""
Filter trips by only allowing lines involving certain elements. If both lines and authorities are specified, only one must be valid for each line to be used. If a line is both banned and whitelisted, it will be counted as banned.
"""
input InputWhiteListed {
  """
  Set of ids for lines that should be used
  """
  lines: [ID] = []

  """
  Set of ids for authorities that should be used
  """
  authorities: [ID] = []
}

type Interchange {
  staySeated: Boolean

  guaranteed: Boolean

  """
  The transfer priority is used to decide where a transfer should happen, at the highest prioritized location. If the guarantied flag is set it take precedence priority. A guarantied ALLOWED transfer is preferred over a PREFERRED none-guarantied transfer.
  """
  priority: InterchangePriority

  """
  Maximum time after scheduled departure time the connecting transport is guarantied to wait for the delayed trip. [NOT RESPECTED DURING ROUTING, JUST PASSED THROUGH]
  """
  maximumWaitTime: Int

  FromLine: Line @deprecated(reason: "This is the same as using the `fromServiceJourney { line }` field.")

  ToLine: Line @deprecated(reason: "This is the same as using the `toServiceJourney { line }` field.")

  fromServiceJourney: ServiceJourney

  toServiceJourney: ServiceJourney

  FromServiceJourney: ServiceJourney @deprecated(reason: "Use fromServiceJourney instead")

  ToServiceJourney: ServiceJourney @deprecated(reason: "Use toServiceJourney instead")
}

enum InterchangePriority {
  preferred

  recommended

  allowed

  notAllowed
}

enum InterchangeWeighting {
  """
  Highest priority interchange.
  """
  preferredInterchange

  """
  Second highest priority interchange.
  """
  recommendedInterchange

  """
  Third highest priority interchange.
  """
  interchangeAllowed

  """
  Interchange not allowed.
  """
  noInterchange
}

"""
Parameters for the OTP Itinerary Filter Chain. These parameters SHOULD be configured on the server side and should not be used by the client. They are made available here to be able to experiment and tune the server.
"""
input ItineraryFilters {
  """
  Set a relative limit for all transit itineraries. The limit is calculated based on the best transit itinerary generalized-cost. Itineraries without transit legs are excluded from this filter. Example: f(x) = 3600 + 2.0 x. If the lowest cost returned is 10 000, then the limit is set to: 3 600 + 2 * 10 000 = 26 600. Then all itineraries with at least one transit leg and a cost above 26 600 is removed from the result. Default: 3600.0 + 2.5 x
  """
  transitGeneralizedCostLimit: DoubleFunction

  """
  Pick ONE itinerary from each group after putting itineraries that is 85% similar together.
  """
  groupSimilarityKeepOne: Float = 0.85

  """
  Reduce the number of itineraries in each group to to maximum 3 itineraries. The itineraries are grouped by similar legs (on board same journey). So, if  68% of the distance is traveled by similar legs, then two itineraries are in the same group. Default value is 68%, must be at least 50%.
  """
  groupSimilarityKeepThree: Float = 0.68

  """
  Of the itineraries grouped to maximum of three itineraries, how much worse can the non-grouped legs be compared to the lowest cost. 2.0 means that they can be double the cost, and any itineraries having a higher cost will be filtered. Default value is 2.0, use a value lower than 1.0 to turn off
  """
  groupedOtherThanSameLegsMaxCostMultiplier: Float = 2.0
}

type JourneyPattern {
  id: ID!

  line: Line!

  directionType: DirectionType

  name: String

  serviceJourneys: [ServiceJourney!]!

  """
  List of service journeys for the journey pattern for a given date
  """
  serviceJourneysForDate(date: Date): [ServiceJourney!]!

  """
  Quays visited by service journeys for this journey patterns
  """
  quays: [Quay!]!

  pointsOnLink: PointsOnLink

  """
  Get all situations active for the journey pattern.
  """
  situations: [PtSituationElement]!

  notices: [Notice]!
}

"""
Part of a trip pattern. Either a ride on a public transport vehicle or access or path link to/from/between places
"""
type Leg {
  """
  The aimed date and time this leg starts.
  """
  aimedStartTime: DateTime!

  """
  The expected, realtime adjusted date and time this leg starts.
  """
  expectedStartTime: DateTime!

  """
  The aimed date and time this leg ends.
  """
  aimedEndTime: DateTime!

  """
  The expected, realtime adjusted date and time this leg ends.
  """
  expectedEndTime: DateTime!

  """
  The mode of transport or access (e.g., foot) used when traversing this leg.
  """
  mode: Mode!

  """
  The transport sub mode (e.g., localBus or expressBus) used when traversing this leg. Null if leg is not a ride
  """
  transportSubmode: TransportSubmode

  """
  The legs's duration in seconds
  """
  duration: Long

  """
  NOT IMPLEMENTED
  """
  directDuration: Long

  """
  The legs's geometry.
  """
  pointsOnLink: PointsOnLink

  """
  For ride legs, the service authority used for this legs. For non-ride legs, null.
  """
  authority: Authority

  """
  For ride legs, the operator used for this legs. For non-ride legs, null.
  """
  operator: Operator

  """
  Whether there is real-time data about this leg
  """
  realtime: Boolean!

  """
  The distance traveled while traversing the leg in meters.
  """
  distance: Float

  """
  Generalized cost or weight of the leg. Used for debugging.
  """
  generalizedCost: Int

  """
  Whether this leg is a ride leg or not.
  """
  ride: Boolean!

  """
  Whether this leg is walking with a bike.
  """
  walkingBike: Boolean

  """
  Whether this leg is with a rented bike.
  """
  rentedBike: Boolean

  """
  The Place where the leg originates.
  """
  fromPlace: Place!

  """
  The Place where the leg ends.
  """
  toPlace: Place!

  """
  EstimatedCall for the quay where the leg originates.
  """
  fromEstimatedCall: EstimatedCall

  """
  EstimatedCall for the quay where the leg ends.
  """
  toEstimatedCall: EstimatedCall

  """
  For ride legs, the line. For non-ride legs, null.
  """
  line: Line

  """
  For ride legs, the service journey. For non-ride legs, null.
  """
  serviceJourney: ServiceJourney

  """
  For ride legs, intermediate quays between the Place where the leg originates and the Place where the leg ends. For non-ride legs, empty list.
  """
  intermediateQuays: [Quay!]!

  """
  For ride legs, estimated calls for quays between the Place where the leg originates and the Place where the leg ends. For non-ride legs, empty list.
  """
  intermediateEstimatedCalls: [EstimatedCall]!

  """
  For ride legs, all estimated calls for the service journey. For non-ride legs, empty list.
  """
  serviceJourneyEstimatedCalls: [EstimatedCall]!

  """
  All relevant situations for this leg
  """
  situations: [PtSituationElement!]!

  """
  Do we continue from a specified via place
  """
  steps: [PathGuidance]!

  interchangeFrom: Interchange

  interchangeTo: Interchange

  bookingArrangements: BookingArrangement

  bikeRentalNetworks: [String]!
}

"""
A group of routes which is generally known to the public by a similar name or number
"""
type Line {
  id: ID!

  authority: Authority

  operator: Operator

  branding: Branding

  """
  Publicly announced code for line, differentiating it from other lines for the same operator.
  """
  publicCode: String

  name: String

  transportMode: TransportMode

  transportSubmode: TransportSubmode

  description: String

  url: String

  presentation: Presentation

  bikesAllowed: BikesAllowed

  journeyPatterns: [JourneyPattern]

  quays: [Quay]!

  serviceJourneys: [ServiceJourney]!

  notices: [Notice]!

  """
  Get all situations active for the line.
  """
  situations: [PtSituationElement]!

  """
  Type of flexible line, or null if line is not flexible.
  """
  flexibleLineType: String

  """
  Booking arrangements for flexible line.
  """
  bookingArrangements: BookingArrangement @deprecated(reason: "BookingArrangements are defined per stop, and can be found under `passingTimes` or `estimatedCalls`")
}

"""
Time using the format: HH:mm:SS. Example: 18:25:SS
"""
scalar LocalTime

enum Locale {
  no

  us
}

"""
Input format for specifying a location through either a place reference (id), coordinates or both. If both place and coordinates are provided the place ref will be used if found, coordinates will only be used if place is not known.
"""
input Location {
  """
  The name of the location. This is pass-through informationand is not used in routing.
  """
  name: String

  """
  The id of an element in the OTP model. Currently supports Quay, StopPlace, multimodal StopPlace, and GroupOfStopPlaces.
  """
  place: String

  """
  Coordinates for the location. This can be used alone or as fallback if the place id is not found.
  """
  coordinates: InputCoordinates
}

"""
Long type
"""
scalar Long

"""
NOT IMPLEMENTED
"""
enum Mode {
  air

  bicycle

  bus

  cableway

  water

  funicular

  lift

  rail

  metro

  tram

  coach

  """
  Any for of public transportation
  """
  transit

  foot

  car

  scooter
}

"""
Input format for specifying which modes will be allowed for this search. If this element is not present, it will default to accessMode/egressMode/directMode of foot and all transport modes will be allowed.
"""
input Modes {
  """
  The mode used to get from the origin to the access stops in the transit network the transit network (first-mile). If the element is not present or null,only transit that can be immediately boarded from the origin will be used.
  """
  accessMode: StreetMode

  """
  The mode used to get from the egress stops in the transit network tothe destination (last-mile). If the element is not present or null,only transit that can immediately arrive at the origin will be used.
  """
  egressMode: StreetMode

  """
  The mode used to get from the origin to the destination directly, without using the transit network. If the element is not present or null,direct travel without using transit will be disallowed.
  """
  directMode: StreetMode

  """
  The allowed modes for the transit part of the trip. Use an empty list to disallow transit for this search. If the element is not present or null, it will default to all transport modes.
  """
  transportModes: [TransportModes]
}

enum MultiModalMode {
  """
  Multi modal parent stop places without their mono modal children.
  """
  parent

  """
  Only mono modal children stop places, not their multi modal parent stop
  """
  child

  """
  Both multiModal parents and their mono modal child stop places.
  """
  all
}

"""
Text with language
"""
type MultilingualString {
  value: String

  language: String
}

type Notice {
  id: ID!

  text: String

  publicCode: String
}

"""
Organisation providing public transport services.
"""
type Operator {
  id: ID!

  name: String!

  url: String

  phone: String

  lines: [Line]!

  serviceJourney: [ServiceJourney]!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A series of turn by turn instructions used for walking, biking and driving.
"""
type PathGuidance {
  """
  The distance in meters that this step takes.
  """
  distance: Float

  """
  The relative direction of this step.
  """
  relativeDirection: RelativeDirection

  """
  The name of the street.
  """
  streetName: String

  """
  The absolute direction of this step.
  """
  heading: AbsoluteDirection

  """
  When exiting a highway or traffic circle, the exit name/number.
  """
  exit: String

  """
  Indicates whether or not a street changes direction at an intersection.
  """
  stayOn: Boolean

  """
  This step is on an open area, such as a plaza or train platform, and thus the directions should say something like "cross"
  """
  area: Boolean

  """
  The name of this street was generated by the system, so we should only display it once, and generally just display right/left directions
  """
  bogusName: Boolean

  """
  The latitude of the step.
  """
  latitude: Float

  """
  The longitude of the step.
  """
  longitude: Float
}

"""
Common super class for all places (stop places, quays, car parks, bike parks and bike rental stations )
"""
type Place {
  """
  For transit quays, the name of the quay. For points of interest, the name of the POI.
  """
  name: String

  """
  Type of vertex. (Normal, Bike sharing station, Bike P+R, Transit quay) Mostly used for better localization of bike sharing and P+R station names
  """
  vertexType: VertexType

  """
  The latitude of the place.
  """
  latitude: Float!

  """
  The longitude of the place.
  """
  longitude: Float!

  """
  The quay related to the place.
  """
  quay: Quay

  """
  The flexible area related to the place.
  """
  flexibleArea: Coordinates

  """
  The bike rental station related to the place
  """
  bikeRentalStation: BikeRentalStation

  """
  The rental vehicle related to the place
  """
  rentalVehicle: RentalVehicle
}

type PlaceAtDistance {
  id: ID! @deprecated(reason: "Id is not referable or meaningful and will be removed")

  place: PlaceInterface

  distance: Float
}

"""
Interface for places, i.e. quays, stop places, parks
"""
interface PlaceInterface {
  id: ID!

  latitude: Float

  longitude: Float
}

"""
A list of coordinates encoded as a polyline string (see http://code.google.com/apis/maps/documentation/polylinealgorithm.html)
"""
type PointsOnLink {
  """
  The number of points in the string
  """
  length: Int

  """
  The encoded points of the polyline. Be aware that the string could contain escape characters that need to be accounted for. (https://www.freeformatter.com/javascript-escape.html)
  """
  points: String
}

"""
Types describing common presentation properties
"""
type Presentation {
  colour: String

  textColour: String
}

"""
Simple public transport situation element
"""
type PtSituationElement {
  id: ID!

  """
  Get affected authority for this situation element
  """
  authority: Authority

  lines: [Line]!

  serviceJourneys: [ServiceJourney]!

  quays: [Quay]!

  """
  Summary of situation in all different translations available
  """
  summary: [MultilingualString!]!

  """
  Description of situation in all different translations available
  """
  description: [MultilingualString!]!

  """
  Advice of situation in all different translations available
  """
  advice: [MultilingualString!]!

  """
  Optional links to more information.
  """
  infoLinks: [infoLink]

  """
  Period this situation is in effect
  """
  validityPeriod: ValidityPeriod

  """
  ReportType of this situation
  """
  reportType: ReportType

  """
  Operator's internal id for this situation
  """
  situationNumber: String

  """
  Severity of this situation 
  """
  severity: Severity

  """
  Priority of this situation 
  """
  priority: Int

  """
  Authority that reported this situation
  """
  reportAuthority: Authority @deprecated(reason: "Not yet officially supported. May be removed or renamed.")
}

enum PurchaseWhen {
  timeOfTravelOnly

  dayOfTravelOnly

  untilPreviousDay

  advanceAndDayOfTravel

  other
}

"""
A place such as platform, stance, or quayside where passengers have access to PT vehicles.
"""
type Quay implements PlaceInterface {
  id: ID!

  name: String!

  latitude: Float

  longitude: Float

  description: String

  """
  The stop place to which this quay belongs to.
  """
  stopPlace: StopPlace

  """
  Whether this quay is suitable for wheelchair boarding.
  """
  wheelchairAccessible: WheelchairBoarding

  """
  Public code used to identify this quay within the stop place. For instance a platform code.
  """
  publicCode: String

  """
  List of lines servicing this quay
  """
  lines: [Line!]!

  """
  List of journey patterns servicing this quay
  """
  journeyPatterns: [JourneyPattern]!

  """
  List of visits to this quay as part of vehicle journeys.
  """
  estimatedCalls("DateTime for when to fetch estimated calls from. Default value is current time" startTime: DateTime, timeRange: Int = 86400, "Limit the total number of departures returned." numberOfDepartures: Int = 5, "Limit the number of departures per line and destination display returned. The parameter is only applied when the value is between 1 and 'numberOfDepartures'." numberOfDeparturesPerLineAndDestinationDisplay: Int, omitNonBoarding: Boolean = false, "Filters results by either departures, arrivals or both. For departures forBoarding has to be true and the departure time has to be within the specified time range. For arrivals, forAlight has to be true and the arrival time has to be within the specified time range. If both are asked for, either the conditions for arrivals or the conditions for departures will have to be true for an EstimatedCall to show." arrivalDeparture: ArrivalDeparture = departures, "Parameters for indicating the only authorities and\/or lines or quays to list estimatedCalls for" whiteListed: InputWhiteListed, "Only show estimated calls for selected modes." whiteListedModes: [TransportMode], "Indicates that realtime-cancelled trips should also be included. NOT IMPLEMENTED" includeCancelledTrips: Boolean = false): [EstimatedCall!]!

  """
  Get all situations active for the quay.
  """
  situations: [PtSituationElement]!

  tariffZones: [TariffZone]!
}

type QuayAtDistance {
  id: ID!

  quay: Quay

  """
  The distance in meters to the given quay.
  """
  distance: Float
}

type QueryType {
  """
  Input type for executing a travel search for a trip between two locations. Returns trip patterns describing suggested alternatives for the trip.
  """
  trip("Date and time for the earliest time the user is willing to start the journey (if arriveBy=false\/not set) or the latest acceptable time of arriving (arriveBy=true). Defaults to now" dateTime: DateTime, "The length of the search-window in minutes. This parameter is optional.\n\nThe search-window is defined as the duration between the earliest-departure-time(EDT) and the latest-departure-time(LDT). OTP will search for all itineraries in this departure window. If `arriveBy=true` the `dateTime` parameter is the latest-arrival-time, so OTP will dynamically calculate the EDT. Using a short search-window is faster than using a longer one, but the search duration is not linear. Using a \"too\" short search-window will waste resources server side, while using a search-window that is too long will be slow.\n\nOTP will dynamically calculate a reasonable value for the search-window, if not provided. The calculation comes with a significant overhead (10-20% extra). Whether you should use the dynamic calculated value or pass in a value depends on your use-case. For a travel planner in a small geographical area, with a dense network of public transportation, a fixed value between 40 minutes and 2 hours makes sense. To find the appropriate search-window, adjust it so that the number of itineraries on average is around the wanted `numItineraries`. Make sure you set the `numItineraries` to a high number while testing. For a country wide area like Norway, using the dynamic search-window is the best.\n\nWhen paginating, the search-window is calculated using the `numItineraries` in the original search together with statistics from the search for the last page. This behaviour is configured server side, and can not be overridden from the client.\n\nThe search-window used is returned to the response metadata as `searchWindowUsed` for debugging purposes." searchWindow: Int, "Use the cursor to go to the next \"page\" of itineraries. Copy the cursor from the last response and keep the original request as is. This will enable you to search for itineraries in the next or previous time-window." pageCursor: String, "Search for the best trip options within a time window. If `true` two TripPatterns are considered optimal if one is better on arrival time(earliest wins) and the other is better on departure time(latest wins).In combination with `arriveBy` this parameter cover the following 3 use cases:\n\n\n  - Traveler want to find the best alternative within a time window. Set     `timetableView=true` and `arriveBy=false`. This is the default, and if     the intention of the traveler is unknown it gives the best result,     because it includes the two next use-cases. This option also work well     with paging. Setting the `arriveBy=true`, covers the same use-case, but     the input time is interpreted as latest-arrival-time, and not     earliest-departure-time.\n\n  - Traveler want to find the best alternative with departure after a     specific time. For example: I am at the station now and want to get     home as quickly as possible. Set `timetableView=false` and     `arriveBy=false`. Do not support paging.\n\n  - Traveler want to find the best alternative with arrival before a    specific time. For example going to a meeting. Set `timetableView=false`     and `arriveBy=true`. Do not support paging.\n\nDefault: `true`" timetableView: Boolean, "The start location" from: Location!, "The end location" to: Location!, "Whether the trip should depart at dateTime (false, the default), or arrive at dateTime. See `timetableView` for use-cases where this parameter is relevant." arriveBy: Boolean = false, "Whether the trip must be wheelchair accessible. Supported for the street part to the search, not implemented for the transit jet." wheelchairAccessible: Boolean = false, "When true, realtime updates are ignored during this search." ignoreRealtimeUpdates: Boolean = false, "When true, service journeys cancelled in scheduled route data will be included during this search." includePlannedCancellations: Boolean = false, "The preferable language to use for text targeted the end user. Note! The data quality is limited, only stop and quay names are translates, and not in all places of the API." locale: Locale = no, "The set of access\/egress\/direct\/transit modes to be used for this search. Note that this only works at the Line level. If individual ServiceJourneys have modes that differ from the Line mode, this will NOT be accounted for." modes: Modes, "Parameters for indicating authorities, lines or quays not be used in the trip patterns" banned: InputBanned, "Parameters for indicating the only authorities, lines or quays to be used in the trip patterns" whiteListed: InputWhiteListed, "The maximum walk speed along streets, in meters per second." walkSpeed: Float = 1.3, "Walk cost is multiplied by this value. This is the main parameter to use for limiting walking." walkReluctance: Float = 4.0, "Wait cost is multiplied by this value. Setting this to a value lower than 1 indicates that waiting is better than staying on a vehicle. This should never be set higher than walkReluctance, since that would lead to walking down a line to avoid waiting." waitReluctance: Float = 1.0, "The maximum bike speed along streets, in meters per second" bikeSpeed: Float = 5.0, "The set of characteristics that the user wants to optimise for during bicycle searches -- defaults to safe" bicycleOptimisationMethod: BicycleOptimisationMethod = safe, "When setting the BicycleOptimisationMethod to 'triangle', use these values to tell the routing engine how important each of the factors is compared to the others. All values should add up to 1." triangleFactors: TriangleFactors, "Whether or not bike rental availability information will be used to plan bike rental trips." useBikeRentalAvailabilityInformation: Boolean = false, "An extra penalty added on transfers (i.e. all boardings except the first one). The transferPenalty is used when a user requests even less transfers. In the latter case, we don't actually optimise for fewest transfers, as this can lead to absurd results. Consider a trip in New York from Grand Army Plaza (the one in Brooklyn) to Kalustyan's at noon. The true lowest transfers trip pattern is to wait until midnight, when the 4 train runs local the whole way. The actual fastest trip pattern is the 2\/3 to the 4\/5 at Nevins to the 6 at Union Square, which takes half an hour. Even someone optimise for fewest transfers doesn't want to wait until midnight. Maybe they would be willing to walk to 7th Ave and take the Q to Union Square, then transfer to the 6. If this takes less than transferPenalty seconds, then that's what we'll return." transferPenalty: Int = 0, "An expected transfer time (in seconds) that specifies the amount of time that must pass between exiting one public transport vehicle and boarding another. This time is in addition to time it might take to walk between stops." transferSlack: Int = 120, "The boardSlack is the minimum extra time to board a public transport vehicle. This is the same as the 'minimumTransferTime', except that this also apply to to the first transit leg in the trip. This is the default value used, if not overridden by the 'boardSlackList'." boardSlackDefault: Int = 0, "List of boardSlack for a given set of modes. Defaults: [air : 2100]" boardSlackList: [TransportModeSlack], "The alightSlack is the minimum extra time after exiting a public transport vehicle. This is the default value used, if not overridden by the 'alightSlackList'." alightSlackDefault: Int = 0, "List of alightSlack for a given set of modes. Defaults: [air : 900]" alightSlackList: [TransportModeSlack], "The maximum number of trip patterns to return. Note! This reduce the number of trip patterns AFTER the OTP travel search is done in a post-filtering process. There is little performance gain in reducing the number of trip patterns returned. The post-filtering will reduce the number of trip-patterns down to this size. It does not make the search faster, as it did in OTP1. See also the trip meta-data on how to implement paging." numTripPatterns: Int = 12, "Maximum number of transfers. Note! The best way to reduce the number of transfers is to set the `transferPenalty` parameter." maximumTransfers: Int = 12, "DEPRECATED. REPLACED BY 'itineraryFilters.transitGeneralizedCostLimit'" transitGeneralizedCostLimit: DoubleFunction, "Debug the itinerary-filter-chain. OTP will attach a system notice to itineraries instead of removing them. This is very convenient when tuning the filters." debugItineraryFilter: Boolean = false, "Configure the itinerary-filter-chain. NOTE! THESE PARAMETERS ARE USED FOR SERVER-SIDE TUNING AND IS AVAILABLE HERE FOR TESTING ONLY." itineraryFilters: ItineraryFilters, "FOR TESTING ONLY" extraSearchCoachReluctance: Float): Trip!

  """
  Get a single stopPlace based on its id)
  """
  stopPlace(id: String!): StopPlace

  """
  Get all stopPlaces
  """
  stopPlaces(ids: [String]): [StopPlace]!

  """
  Get all stop places within the specified bounding box
  """
  stopPlacesByBbox(minimumLatitude: Float!, minimumLongitude: Float!, maximumLatitude: Float!, maximumLongitude: Float!, authority: String, "MultiModalMode for query. To control whether multi modal parent stop places, their mono modal children or both are included in the response. Does not affect mono modal stop places that do not belong to a multi modal stop place." multiModalMode: MultiModalMode = parent, "If true only stop places with at least one visiting line are included." filterByInUse: Boolean = false): [StopPlace]!

  """
  Get a single quay based on its id)
  """
  quay(id: String!): Quay

  """
  Get all quays
  """
  quays(ids: [String], name: String): [Quay]!

  """
  Get all quays within the specified bounding box
  """
  quaysByBbox(minimumLatitude: Float!, minimumLongitude: Float!, maximumLatitude: Float!, maximumLongitude: Float!, authority: String, "If true only quays with at least one visiting line are included." filterByInUse: Boolean = false): [Quay]!

  """
  Get all quays within the specified walking radius from a location. The returned type has two fields quay and distance
  """
  quaysByRadius("Latitude of the location" latitude: Float!, "Longitude of the location" longitude: Float!, "Radius via streets (in meters) to search for from the specified location" radius: Float!, authority: String, "fetching only nodes before this node (exclusive)" before: String, "fetching only nodes after this node (exclusive)" after: String, "fetching only the first certain number of nodes" first: Int, "fetching only the last certain number of nodes" last: Int): quayAtDistanceConnection

  """
  Get all places (quays, stop places, car parks etc. with coordinates) within the specified radius from a location. The returned type has two fields place and distance. The search is done by walking so the distance is according to the network of walkables.
  """
  nearest("Latitude of the location" latitude: Float!, "Longitude of the location" longitude: Float!, "Maximum distance (in meters) to search for from the specified location. Default is 2000m." maximumDistance: Float! = 2000.0, "Maximum number of results. Search is stopped when this limit is reached. Default is 20." maximumResults: Int = 20, "Only include places of given types if set. Default accepts all types" filterByPlaceTypes: [FilterPlaceType] = [quay,stopPlace,bicycleRent,bikePark,carPark], "Only include places that include this mode. Only checked for places with mode i.e. quays, departures." filterByModes: [TransportMode], "Only affects queries for quays and stop places. If true only quays and stop places with at least one visiting line are included." filterByInUse: Boolean = false, "Only include places that match one of the given ids." filterByIds: InputPlaceIds, "MultiModalMode for query. To control whether multi modal parent stop places, their mono modal children or both are included in the response. Does not affect mono modal stop places that do not belong to a multi modal stop place. Only applicable for placeType StopPlace" multiModalMode: MultiModalMode = parent, "fetching only nodes before this node (exclusive)" before: String, "fetching only nodes after this node (exclusive)" after: String, "fetching only the first certain number of nodes" first: Int, "fetching only the last certain number of nodes" last: Int): placeAtDistanceConnection

  """
  Get an authority by ID
  """
  authority(id: String!): Authority

  """
  Get all authorities
  """
  authorities: [Authority]!

  """
  Get a operator by ID
  """
  operator(id: String!): Operator

  """
  Get all operators
  """
  operators: [Operator]!

  """
  Get a single line based on its id
  """
  line(id: ID!): Line

  """
  Get all lines
  """
  lines(ids: [ID], name: String, publicCode: String, publicCodes: [String], transportModes: [TransportMode], "Set of ids of authorities to fetch lines for." authorities: [String], "Filter by lines containing flexible \/ on demand serviceJourneys only." flexibleOnly: Boolean = false): [Line]!

  """
  Get a single service journey based on its id
  """
  serviceJourney(id: String!): ServiceJourney

  """
  Get all service journeys
  """
  serviceJourneys("Set of ids of lines to fetch serviceJourneys for." lines: [ID], "Set of ids of private codes to fetch serviceJourneys for." privateCodes: [String], "Set of ids of active dates to fetch serviceJourneys for." activeDates: [Date], "Set of ids of authorities to fetch serviceJourneys for." authorities: [String]): [ServiceJourney]!

  """
  Get all bike rental stations
  """
  bikeRentalStations(ids: [String]): [BikeRentalStation]!

  """
  Get all bike rental stations
  """
  bikeRentalStation(id: String!): BikeRentalStation

  """
  Get all bike rental stations within the specified bounding box.
  """
  bikeRentalStationsByBbox(minimumLatitude: Float, minimumLongitude: Float, maximumLatitude: Float, maximumLongitude: Float): [BikeRentalStation]!

  """
  Get a single bike park based on its id
  """
  bikePark(id: String!): BikePark

  """
  Get all bike parks
  """
  bikeParks: [BikePark]!

  """
  Get default routing parameters.
  """
  routingParameters: RoutingParameters

  """
  Get all active situations.
  """
  situations("Filter by reporting authorities." authorities: [String], "Filter by severity." severities: [Severity]): [PtSituationElement]!

  """
  Get a single situation based on its situationNumber
  """
  situation(situationNumber: String!): PtSituationElement

  """
  Get OTP server information
  """
  serverInfo: ServerInfo!
}

enum RealtimeState {
  """
  The service journey information comes from the regular time table, i.e. no real-time update has been applied.
  """
  scheduled

  """
  The service journey information has been updated, but the journey pattern stayed the same as the journey pattern of the scheduled service journey.
  """
  updated

  """
  The service journey has been canceled by a real-time update.
  """
  canceled

  """
  The service journey has been added using a real-time update, i.e. the service journey was not present in the regular time table.
  """
  Added

  """
  The service journey information has been updated and resulted in a different journey pattern compared to the journey pattern of the scheduled service journey.
  """
  modified
}

enum RelativeDirection {
  depart

  hardLeft

  left

  slightlyLeft

  continue

  slightlyRight

  right

  hardRight

  circleClockwise

  circleCounterclockwise

  elevator

  uturnLeft

  uturnRight
}

type RentalVehicle implements PlaceInterface {
  id: ID!

  vehicleType: RentalVehicleType!

  network: String!

  longitude: Float!

  latitude: Float!

  currentRangeMeters: Float
}

type RentalVehicleType {
  vehicleTypeId: String!

  name: String

  formFactor: String!

  propulsionType: String!

  maxRangeMeters: Float
}

enum ReportType {
  """
  Indicates a general info-message that should not affect trip.
  """
  general

  """
  Indicates an incident that may affect trip.
  """
  incident
}

"""
Description of the reason, why the planner did not return any results
"""
type RoutingError {
  """
  An enum describing the reason
  """
  code: RoutingErrorCode!

  """
  An enum describing the field which should be changed, in order for the search to succeed
  """
  inputField: InputField

  """
  A textual description of why the search failed. The clients are expected to have their own translations based on the code, for user visible error messages.
  """
  description: String!
}

enum RoutingErrorCode {
  """
  No transit connection was found between the origin and destination withing the operating day or the next day
  """
  noTransitConnection

  """
  Transit connection was found, but it was outside the search window, see metadata for the next search window
  """
  noTransitConnectionInSearchWindow

  """
  The date specified is outside the range of data currently loaded into the system
  """
  outsideServicePeriod

  """
  The coordinates are outside the bounds of the data currently loaded into the system
  """
  outsideBounds

  """
  The specified location is not close to any streets or transit stops
  """
  locationNotFound

  """
  No stops are reachable from the location specified. You can try searching using a different access or egress mode
  """
  noStopsInRange

  """
  The origin and destination are so close to each other, that walking is always better, but no direct mode was specified for the search
  """
  walkingBetterThanTransit

  """
  An unknown error happened during the search. The details have been logged to the server logs
  """
  systemError
}

"""
The default parameters used in travel searches.
"""
type RoutingParameters {
  """
  Max walk speed along streets, in meters per second
  """
  walkSpeed: Float

  """
  Max bike speed along streets, in meters per second
  """
  bikeSpeed: Float

  """
  Max car speed along streets, in meters per second
  """
  carSpeed: Float

  """
  This is the maximum duration in seconds for a direct street search. This is a performance limit and should therefore be set high. Use filters to limit what is presented to the client.
  """
  maxDirectStreetDuration: Float

  """
  Whether the trip must be wheelchair accessible.
  """
  wheelChairAccessible: Boolean

  """
  The maximum number of itineraries to return.
  """
  numItineraries: Int

  """
  The maximum slope of streets for wheelchair trips.
  """
  maxSlope: Float

  """
  Whether the planner should return intermediate stops lists for transit legs.
  """
  showIntermediateStops: Boolean

  """
  An extra penalty added on transfers (i.e. all boardings except the first one).
  """
  transferPenalty: Int

  """
  A multiplier for how bad walking is, compared to being in transit for equal lengths of time.
  """
  walkReluctance: Float

  """
  Used instead of walkReluctance for stairs.
  """
  stairsReluctance: Float

  """
  Multiplicative factor on expected turning time.
  """
  turnReluctance: Float

  """
  How long does it take to get on an elevator, on average.
  """
  elevatorBoardTime: Int

  """
  What is the cost of boarding a elevator?
  """
  elevatorBoardCost: Int

  """
  How long does it take to advance one floor on an elevator?
  """
  elevatorHopTime: Int

  """
  What is the cost of travelling one floor on an elevator?
  """
  elevatorHopCost: Int

  """
  Time to rent a bike.
  """
  bikeRentalPickupTime: Int

  """
  Cost to rent a bike.
  """
  bikeRentalPickupCost: Int

  """
  Time to drop-off a rented bike.
  """
  bikeRentalDropOffTime: Int

  """
  Cost to drop-off a rented bike.
  """
  bikeRentalDropOffCost: Int

  """
  Time to park a bike.
  """
  bikeParkTime: Int

  """
  Cost to park a bike.
  """
  bikeParkCost: Int

  """
  Time to park a car in a park and ride, w/o taking into account driving and walking cost.
  """
  carDropOffTime: Int

  """
  How much worse is waiting for a transit vehicle than being on a transit vehicle, as a multiplier.
  """
  waitReluctance: Float

  """
  How much less bad is waiting at the beginning of the trip (replaces waitReluctance on the first boarding).
  """
  waitAtBeginningFactor: Float

  """
  This prevents unnecessary transfers by adding a cost for boarding a vehicle.
  """
  walkBoardCost: Int

  """
  Separate cost for boarding a vehicle with a bicycle, which is more difficult than on foot.
  """
  bikeBoardCost: Int

  """
  Penalty added for using every route that is not preferred if user set any route as preferred. We return number of seconds that we are willing to wait for preferred route.
  """
  otherThanPreferredRoutesPenalty: Int

  """
  A global minimum transfer time (in seconds) that specifies the minimum amount of time that must pass between exiting one transit vehicle and boarding another.
  """
  transferSlack: Int

  """
  The boardSlack is the minimum extra time to board a public transport vehicle. This is the same as the 'minimumTransferTime', except that this also apply to to the first transit leg in the trip. This is the default value used, if not overridden by the 'boardSlackList'.
  """
  boardSlackDefault: Int

  """
  List of boardSlack for a given set of modes.
  """
  boardSlackList: [TransportModeSlackType]

  """
  The alightSlack is the minimum extra time after exiting a public transport vehicle. This is the default value used, if not overridden by the 'alightSlackList'.
  """
  alightSlackDefault: Int

  """
  List of alightSlack for a given set of modes.
  """
  alightSlackList: [TransportModeSlackType]

  """
  Maximum number of transfers returned in a trip plan.
  """
  maxTransfers: Int

  reverseOptimizeOnTheFly: Boolean @deprecated(reason: "NOT IN USE IN OTP2.")

  compactLegsByReversedSearch: Boolean @deprecated(reason: "NOT IN USE IN OTP2.")

  """
  The deceleration speed of an automobile, in meters per second per second.
  """
  carDecelerationSpeed: Float

  """
  The acceleration speed of an automobile, in meters per second per second.
  """
  carAccelerationSpeed: Float

  """
  When true, realtime updates are ignored during this search.
  """
  ignoreRealTimeUpdates: Boolean

  """
  When true, service journeys cancelled in scheduled route data will be included during this search.
  """
  includedPlannedCancellations: Boolean

  """
  If true, the remaining weight heuristic is disabled.
  """
  disableRemainingWeightHeuristic: Boolean

  allowBikeRental: Boolean @deprecated(reason: "Rental is specified by modes")

  parkAndRide: Boolean

  kissAndRide: Boolean

  debugItineraryFilter: Boolean

  """
  Accept only paths that use transit (no street-only paths).
  """
  onlyTransitTrips: Boolean

  """
  Option to disable the default filtering of GTFS-RT alerts by time.
  """
  disableAlertFiltering: Boolean

  """
  Whether to apply the ellipsoid->geoid offset to all elevations in the response.
  """
  geoIdElevation: Boolean
}

type ServerInfo {
  """
  Maven version
  """
  version: String

  """
  OTP Build timestamp
  """
  buildTime: String

  gitBranch: String

  gitCommit: String

  gitCommitTime: String

  """
  The 'configVersion' of the otp-config.json file.
  """
  otpConfigVersion: String

  """
  The 'configVersion' of the build-config.json file.
  """
  buildConfigVersion: String

  """
  The 'configVersion' of the router-config.json file.
  """
  routerConfigVersion: String

  """
  The otp-serialization-version-id used to check graphs for compatibility with current version of OTP.
  """
  otpSerializationVersionId: String
}

enum ServiceAlteration {
  cancellation

  replaced

  extraJourney

  planned
}

"""
A planned vehicle journey with passengers.
"""
type ServiceJourney {
  id: ID!

  line: Line!

  activeDates: [Date]!

  transportMode: TransportMode

  transportSubmode: TransportSubmode

  """
  Publicly announced code for service journey, differentiating it from other service journeys for the same line.
  """
  publicCode: String

  """
  For internal use by operators.
  """
  privateCode: String

  operator: Operator

  directionType: DirectionType

  serviceAlteration: ServiceAlteration @deprecated(reason: "The service journey alteration will be moved out of SJ and grouped together with the SJ and date. In Netex this new type is called DatedServiceJourney. We will create artificial DSJs for the old SJs.")

  """
  Whether service journey is accessible with wheelchair.
  """
  wheelchairAccessible: WheelchairBoarding

  """
  Whether bikes are allowed on service journey.
  """
  bikesAllowed: BikesAllowed

  journeyPattern: JourneyPattern

  """
  Quays visited by service journey
  """
  quays("Only fetch the first n quays on the service journey" first: Int, "Only fetch the last n quays on the service journey" last: Int): [Quay!]!

  """
  Returns scheduled passing times only - without realtime-updates, for realtime-data use 'estimatedCalls'
  """
  passingTimes: [TimetabledPassingTime]!

  """
  Returns scheduled passingTimes for this ServiceJourney for a given date, updated with realtime-updates (if available). NB! This takes a date as argument (default=today) and returns estimatedCalls for that date and should only be used if the date is known when creating the request. For fetching estimatedCalls for a given trip.leg, use leg.serviceJourneyEstimatedCalls instead.
  """
  estimatedCalls("Date to get estimated calls for. Defaults to today." date: Date): [EstimatedCall]

  """
  Detailed path travelled by service journey. Not available for flexible trips.
  """
  pointsOnLink: PointsOnLink

  notices: [Notice]!

  """
  Get all situations active for the service journey.
  """
  situations: [PtSituationElement]!

  """
  Booking arrangements for flexible services.
  """
  bookingArrangements: BookingArrangement @deprecated(reason: "BookingArrangements are defined per stop, and can be found under `passingTimes` or `estimatedCalls`")
}

enum Severity {
  """
  Situation has unknown impact on trips.
  """
  unknown

  """
  Situation has no impact on trips.
  """
  noImpact

  """
  Situation has a very slight impact on trips.
  """
  verySlight

  """
  Situation has a slight impact on trips.
  """
  slight

  """
  Situation has an impact on trips (default).
  """
  normal

  """
  Situation has a severe impact on trips.
  """
  severe

  """
  Situation has a very severe impact on trips.
  """
  verySevere

  """
  Severity is undefined.
  """
  undefined
}

"""
Named place where public transport may be accessed. May be a building complex (e.g. a station) or an on-street location.
"""
type StopPlace implements PlaceInterface {
  id: ID!

  name: String!

  latitude: Float

  longitude: Float

  description: String

  """
  Relative weighting of this stop with regards to interchanges. NOT IMPLEMENTED
  """
  weighting: InterchangeWeighting

  tariffZones: [TariffZone]!

  """
  The transport modes of quays under this stop place.
  """
  transportMode: [TransportMode]

  """
  The transport submode serviced by this stop place.
  """
  transportSubmode: [TransportSubmode]

  """
  Returns all quays that are children of this stop place
  """
  quays("If true only quays with at least one visiting line are included." filterByInUse: Boolean = false): [Quay]

  """
  Returns parent stop for this stop
  """
  parent: StopPlace

  """
  List of visits to this stop place as part of vehicle journeys.
  """
  estimatedCalls("DateTime for when to fetch estimated calls from. Default value is current time" startTime: DateTime, timeRange: Int = 86400, "Limit the total number of departures returned." numberOfDepartures: Int = 5, "Limit the number of departures per line and destination display returned. The parameter is only applied when the value is between 1 and 'numberOfDepartures'." numberOfDeparturesPerLineAndDestinationDisplay: Int, arrivalDeparture: ArrivalDeparture = departures, "Parameters for indicating the only authorities and\/or lines or quays to list estimatedCalls for" whiteListed: InputWhiteListed, "Only show estimated calls for selected modes." whiteListedModes: [TransportMode], "Indicates that realtime-cancelled trips should also be included. NOT IMPLEMENTED" includeCancelledTrips: Boolean = false): [EstimatedCall!]!
}

enum StreetMode {
  """
  Walk only
  """
  foot

  """
  Bike only. This can be used as access/egress, but transfers will still be walk only.
  """
  bicycle

  """
  Bike to a bike parking area, then walk the rest of the way. Direct mode and access mode only.
  """
  bike_park

  """
  Walk to a bike rental point, bike to a bike rental drop-off point, and walk the rest of the way. This can include bike rental at fixed locations or free-floating services.
  """
  bike_rental

  """
  Walk to a scooter rental point, ride a scooter to a scooter rental drop-off point, and walk the rest of the way. This can include scooter rental at fixed locations or free-floating services.
  """
  scooter_rental

  """
  Car only. Direct mode only.
  """
  car

  """
  Start in the car, drive to a parking area, and walk the rest of the way. Direct mode and access mode only.
  """
  car_park

  """
  Walk to a pickup point along the road, drive to a drop-off point along the road, and walk the rest of the way. This can include various taxi-services or kiss & ride.
  """
  car_pickup

  """
  Walk to an eligible pickup area for flexible transportation, ride to an eligible drop-off area and then walk the rest of the way.
  """
  flexible
}

"""
A system notice is used to tag elements with system information for debugging or other system related purpose. One use-case is to run a routing search with 'itineraryFilters.debug: true'. This will then tag itineraries instead of removing them from the result. This make it possible to inspect the itinerary-filter-chain. A SystemNotice only have english text, because the primary user are technical staff, like testers and developers.
"""
type SystemNotice {
  tag: String

  text: String
}

type TariffZone {
  id: ID!

  name: String
}

"""
Time using the format: `HH:MM:SS`. Example: `18:25:43`
"""
scalar Time

type TimeAndDayOffset {
  """
  Local time
  """
  time: Time

  """
  Number of days offset from base line time
  """
  dayOffset: Int
}

"""
Scheduled passing times. These are not affected by real time updates.
"""
type TimetabledPassingTime {
  quay: Quay

  """
  Scheduled time of arrival at quay
  """
  arrival: TimeAndDayOffset

  """
  Scheduled time of departure from quay
  """
  departure: TimeAndDayOffset

  """
  Whether this is a timing point or not. Boarding and alighting is not allowed at timing points.
  """
  timingPoint: Boolean

  """
  Whether vehicle may be boarded at quay.
  """
  forBoarding: Boolean

  """
  Whether vehicle may be alighted at quay.
  """
  forAlighting: Boolean

  """
  Whether vehicle will only stop on request.
  """
  requestStop: Boolean

  serviceJourney: ServiceJourney

  destinationDisplay: DestinationDisplay

  notices: [Notice]!

  """
  Booking arrangements for this passing time.
  """
  bookingArrangements: BookingArrangement
}

enum TransportMode {
  air

  bus

  cableway

  water

  funicular

  lift

  rail

  metro

  tram

  trolleybus

  monorail

  coach

  unknown
}

"""
Used to specify board and alight slack for a given modes.
"""
input TransportModeSlack {
  """
  The slack used for all given modes.
  """
  slack: Int!

  """
  List of modes for which the given slack apply.
  """
  modes: [TransportMode!]!
}

"""
Used to specify board and alight slack for a given modes.
"""
type TransportModeSlackType {
  slack: Int!

  modes: [TransportMode!]!
}

input TransportModes {
  """
  A transportMode that should be allowed for this search. You can furthernarrow it down by specifying a list of transportSubModes
  """
  transportMode: TransportMode

  """
  The allowed transportSubModes for this search. If this element is notpresent or null, it will default to all transportSubModes for the specifiedTransportMode. Be aware that all transportSubModes have an associated TransportMode, which must match what is specified in the transportMode field.
  """
  transportSubModes: [TransportSubmode]
}

enum TransportSubmode {
  unknown

  undefined

  internationalFlight

  domesticFlight

  intercontinentalFlight

  domesticScheduledFlight

  shuttleFlight

  intercontinentalCharterFlight

  internationalCharterFlight

  roundTripCharterFlight

  sightseeingFlight

  helicopterService

  domesticCharterFlight

  SchengenAreaFlight

  airshipService

  shortHaulInternationalFlight

  canalBarge

  localBus

  regionalBus

  expressBus

  nightBus

  postBus

  specialNeedsBus

  mobilityBus

  mobilityBusForRegisteredDisabled

  sightseeingBus

  shuttleBus

  highFrequencyBus

  dedicatedLaneBus

  schoolBus

  schoolAndPublicServiceBus

  railReplacementBus

  demandAndResponseBus

  airportLinkBus

  internationalCoach

  nationalCoach

  shuttleCoach

  regionalCoach

  specialCoach

  schoolCoach

  sightseeingCoach

  touristCoach

  commuterCoach

  funicular

  streetCableCar

  allFunicularServices

  undefinedFunicular

  metro

  tube

  urbanRailway

  cityTram

  localTram

  regionalTram

  sightseeingTram

  shuttleTram

  trainTram

  telecabin

  cableCar

  lift

  chairLift

  dragLift

  telecabinLink

  local

  highSpeedRail

  suburbanRailway

  regionalRail

  interregionalRail

  longDistance

  international

  sleeperRailService

  nightRail

  carTransportRailService

  touristRailway

  airportLinkRail

  railShuttle

  replacementRailService

  specialTrain

  crossCountryRail

  rackAndPinionRailway

  internationalCarFerry

  nationalCarFerry

  regionalCarFerry

  localCarFerry

  internationalPassengerFerry

  nationalPassengerFerry

  regionalPassengerFerry

  localPassengerFerry

  postBoat

  trainFerry

  roadFerryLink

  airportBoatLink

  highSpeedVehicleService

  highSpeedPassengerService

  sightseeingService

  schoolBoat

  cableFerry

  riverBus

  scheduledFerry

  shuttleFerryService

  communalTaxi

  charterTaxi

  waterTaxi

  railTaxi

  bikeTaxi

  blackCab

  miniCab

  allTaxiServices

  hireCar

  hireVan

  hireMotorbike

  hireCycle

  allHireVehicles
}

"""
How much the factors safety, slope and distance are weighted relative to each other when routing bicycle legs. In total all three values need to add up to 1.
"""
input TriangleFactors {
  """
  How important is bicycle safety expressed as a fraction of 1.
  """
  safety: Float!

  """
  How important is slope/elevation expressed as a fraction of 1.
  """
  slope: Float!

  """
  How important is time expressed as a fraction of 1. Note that what this really optimises for is distance (even if that means going over terrible surfaces, so I might be slower than the safe route).
  """
  time: Float!
}

"""
Description of a travel between two places.
"""
type Trip {
  """
  The time and date of travel
  """
  dateTime: DateTime

  """
  The trip request metadata.
  """
  metadata: TripSearchData

  """
  The origin
  """
  fromPlace: Place!

  """
  The destination
  """
  toPlace: Place!

  """
  A list of possible trip patterns
  """
  tripPatterns: [TripPattern!]!

  """
  A list of possible error messages as enum
  """
  messageEnums: [String]! @deprecated(reason: "Use routingErrors instead")

  """
  A list of possible error messages in cleartext
  """
  messageStrings: [String]! @deprecated(reason: "Use routingErrors instead")

  """
  A list of routing errors, and fields which caused them
  """
  routingErrors: [RoutingError!]!

  """
  Information about the timings for the trip generation
  """
  debugOutput: debugOutput!

  """
  Use the cursor to get the previous page of results. Use this cursor for the pageCursor parameter in the trip query in order to get the previous page.
  The previous page is a set of itineraries departing BEFORE the first itinerary in this result.
  """
  previousPageCursor: String

  """
  Use the cursor to get the next page of results. Use this cursor for the pageCursor parameter in the trip query in order to get the next page.
  The next page is a set of itineraries departing AFTER the last itinerary in this result.
  """
  nextPageCursor: String
}

"""
List of legs constituting a suggested sequence of rides and links for a specific trip.
"""
type TripPattern {
  """
  Time that the trip departs.
  """
  startTime: DateTime @deprecated(reason: "Replaced with expectedStartTime")

  """
  Time that the trip arrives.
  """
  endTime: DateTime @deprecated(reason: "Replaced with expectedEndTime")

  """
  The aimed date and time the trip starts.
  """
  aimedStartTime: DateTime!

  """
  The expected, realtime adjusted date and time the trip starts.
  """
  expectedStartTime: DateTime!

  """
  The aimed date and time the trip ends.
  """
  aimedEndTime: DateTime!

  """
  The expected, realtime adjusted date and time the trip ends.
  """
  expectedEndTime: DateTime!

  """
  Duration of the trip, in seconds.
  """
  duration: Long

  """
  NOT IMPLEMENTED.
  """
  directDuration: Long

  """
  How much time is spent waiting for transit to arrive, in seconds.
  """
  waitingTime: Long

  """
  Total distance for the trip, in meters. NOT IMPLEMENTED
  """
  distance: Float

  """
  How much time is spent walking, in seconds.
  """
  walkTime: Long

  """
  How far the user has to walk, in meters.
  """
  walkDistance: Float

  """
  A list of legs. Each leg is either a walking (cycling, car) portion of the trip, or a ride leg on a particular vehicle. So a trip where the use walks to the Q train, transfers to the 6, then walks to their destination, has four legs.
  """
  legs: [Leg]!

  """
  Get all system notices.
  """
  systemNotices: [SystemNotice!]!

  """
  Generalized cost or weight of the itinerary. Used for debugging.
  """
  generalizedCost: Int

  """
  A cost calculated to distribute wait-time and avoid very short transfers. This field is meant for debugging only.
  """
  waitTimeOptimizedCost: Int

  """
  A cost calculated to favor transfer with higher priority. This field is meant for debugging only.
  """
  transferPriorityCost: Int
}

"""
Trips search metadata.
"""
type TripSearchData {
  """
  This is the time window used by the raptor search. The input searchWindow is an optional parameter and is dynamically assigned if not set. OTP might override the value if it is too small or too large. When paging OTP adjusts it to the appropriate size, depending on the number of itineraries found in the current search window. The scaling of the search window ensures faster paging and limits resource usage. The unit is seconds.
  """
  searchWindowUsed: Int!

  """
  This is the suggested search time for the "next page" or time window. Insert it together with the 'searchWindowUsed' in the request to get a new set of trips following in the time-window AFTER the current search.
  """
  nextDateTime: DateTime @deprecated(reason: "Use pageCursor instead")

  """
  This is the suggested search time for the "previous page" or time-window. Insert it together with the 'searchWindowUsed' in the request to get a new set of trips preceding in the time-window BEFORE the current search.
  """
  prevDateTime: DateTime @deprecated(reason: "Use pageCursor instead")
}

type ValidityPeriod {
  """
  Start of validity period
  """
  startTime: DateTime

  """
  End of validity period. Will return 'null' if validity is open-ended.
  """
  endTime: DateTime
}

enum VertexType {
  normal

  transit

  bikePark

  bikeShare
}

enum WheelchairBoarding {
  """
  There is no accessibility information for the stopPlace/quay.
  """
  noInformation

  """
  Boarding wheelchair-accessible serviceJourneys is possible at this stopPlace/quay.
  """
  possible

  """
  Wheelchair boarding/alighting is not possible at this stop.
  """
  notPossible
}

type debugOutput {
  totalTime: Long
}

type infoLink {
  """
  URI
  """
  uri: String

  """
  Label
  """
  label: String
}

"""
A connection to a list of items.
"""
type placeAtDistanceConnection {
  """
  a list of edges
  """
  edges: [placeAtDistanceEdge]

  """
  details about this specific page
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection
"""
type placeAtDistanceEdge {
  """
  The item at the end of the edge
  """
  node: PlaceAtDistance

  """
  cursor marks a unique position or index into the connection
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type quayAtDistanceConnection {
  """
  a list of edges
  """
  edges: [quayAtDistanceEdge]

  """
  details about this specific page
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection
"""
type quayAtDistanceEdge {
  """
  The item at the end of the edge
  """
  node: QuayAtDistance

  """
  cursor marks a unique position or index into the connection
  """
  cursor: String!
}

schema {
  query: QueryType
}
